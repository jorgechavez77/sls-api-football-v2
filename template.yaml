AWSTemplateFormatVersion: 2010-09-09
Description: sls-api-football-v2
Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs22.x
    Timeout: 29
    MemorySize: 128
    Architectures:
      - x86_64
    Environment:
      Variables:
        MONGODB_URI: '{{resolve:secretsmanager:/dev/football-api/credentials:SecretString:MONGODB_URI}}'
        NODE_OPTIONS: --enable-source-maps
    LoggingConfig:
      LogFormat: JSON

Resources:
  FootballApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      Auth:
        UsagePlan:
          CreateUsagePlan: SHARED
          UsagePlanName: dev-usage-plan
      EndpointConfiguration:
        Type: REGIONAL

  GetTournamentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-api-football-v2-get-tournament
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda-role-v1
      Handler: src/football/handler.getTournament
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tournaments/{id}
            Method: GET
            RestApiId: !Ref FootballApi
            Auth:
              ApiKeyRequired: true
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Sourcemap: true
        EntryPoints:
          - src/football/handler.ts

  GetTournamentFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetTournamentFunction}
      RetentionInDays: 7

  CreateTournamentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-api-football-v2-create-tournament
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda-role-v1
      Handler: src/football/handler.createTournament
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tournaments
            Method: POST
            RestApiId: !Ref FootballApi
            Auth:
              ApiKeyRequired: true
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Sourcemap: true
        EntryPoints:
          - src/football/handler.ts

  CreateTournamentFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CreateTournamentFunction}
      RetentionInDays: 7

  UpdateTournamentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-api-football-v2-update-tournament
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda-role-v1
      Handler: src/football/handler.updateTournament
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tournaments/{id}
            Method: PATCH
            RestApiId: !Ref FootballApi
            Auth:
              ApiKeyRequired: true
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Sourcemap: true
        EntryPoints:
          - src/football/handler.ts

  UpdateTournamentFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${UpdateTournamentFunction}
      RetentionInDays: 7

  DeleteTournamentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-api-football-v2-delete-tournament
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda-role-v1
      Handler: src/football/handler.deleteTournament
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tournaments/{id}
            Method: DELETE
            RestApiId: !Ref FootballApi
            Auth:
              ApiKeyRequired: true
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Sourcemap: true
        EntryPoints:
          - src/football/handler.ts

  DeleteTournamentFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteTournamentFunction}
      RetentionInDays: 7
